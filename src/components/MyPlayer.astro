---
/**
 * props:
 * - id      网易云歌曲 ID（必填）
 * - autoplay 是否自动播放（可选，默认 false）
 */
const { songId, autoplay = false } = Astro.props;
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css" />
<script is:inline src="https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js"></script>
<script is:inline src="https://cdn.jsdelivr.net/npm/hls.js/dist/hls.min.js"></script>
<div id={`aplayer-${songId}`}></div>
<script define:vars={{ songId, autoplay }}>
	const NETEASE_API_BASE_URL =
		import.meta.env.PUBLIC_NETEASE_API_BASE_URL ||
		"https://netease-cloud-music-api-binaryify.vercel.app";

	document.addEventListener("DOMContentLoaded", async () => {
		const container = document.getElementById(`aplayer-${songId}`);
		if (container && window.APlayer) {
			try {
				const detailRes = await fetch(`${NETEASE_API_BASE_URL}/song/detail?ids=${songId}`);
				const detail = await detailRes.json();
				const song = detail.songs?.[0];

				if (song) {
					const urlRes = await fetch(
						`${NETEASE_API_BASE_URL}/song/url/v1?id=${songId}&level=lossless`,
					);
					if (!urlRes.ok) {
						throw new Error("Failed to fetch song URL from Netease API");
					}
					const urlData = await urlRes.json();
					const songData = urlData.data?.[0];

					if (!songData || !songData.url) {
						throw new Error("Song URL not found in response from Netease API");
					}
					const songUrl = songData.url.replace(/^http:/, "https:");

					const ap = new window.APlayer({
						container: container,
						autoplay: autoplay,
						preload: "auto",
						audio: [
							{
								name: song.name,
								artist: song.ar.map((a) => a.name).join("/"),
								url: songUrl,
								cover: song.al.picUrl,
								type: "auto",
							},
						],
					});

					if (ap) {
						const refreshUrl = async () => {
							try {
								const apiUrl = `${NETEASE_API_BASE_URL}/song/url/v1?id=${songId}&level=lossless&timestamp=${Date.now()}`;
								const res = await fetch(apiUrl);
								if (!res.ok) throw new Error("Failed to fetch new URL from Netease API");

								const data = await res.json();
								const songData = data.data?.[0];

								if (songData && songData.url) {
									const newUrl = songData.url.replace(/^http:/, "https:");
									console.log("Refreshing expired song URL from client...");
									ap.list.audios[0].url = newUrl;
									ap.audio.src = newUrl;
									ap.audio.load();
									ap.audio.play();
								}
							} catch (error) {
								console.error("Error refreshing song URL:", error);
							}
						};

						ap.on("error", refreshUrl);
					}
				} else {
					console.error("Failed to load song details from Netease API.");
				}
			} catch (error) {
				console.error("Error fetching song details from Netease API:", error);
			}
		}
	});
</script>
